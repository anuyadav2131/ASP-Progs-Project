@model MedicalStoreManagement.Models.Registration
@{
    <div class="Tape"><h3>Medical Store Management</h3></div>
}
@{
    ViewBag.Title = "Registration";
}
@if (Session != null)
{
    <h6 style="text-align:right">@Session["username"]</h6>
}
else
{
    Response.Redirect("MainLogin");
}
@*<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css" integrity="sha384-xOolHFLEh07PJGoPkLv1IbcEPTNtaed2xpHsD9ESMhqIYd0nLMwNLD69Npy4HI+N" crossorigin="anonymous">*@
<style>
    .Tape {
        background-color: lightgreen;
        color: black;
        font-weight: bold;
        text-align: center;
        font-size: large;
    }

    .main-heading {
        text-align: center;
        font-family: 'Lucida Handwriting';
        font-weight: 200;
    }

    .button {
        text-align: center;
        font-family: 'Lucida Handwriting';
        font-weight: bold;
        color: white;
        background-color: limegreen;
    }

    .form-horizontal {
        text-align: center;
    }
</style>

@Html.Raw(ViewBag.Message)
<h6 class="text-center success">@Html.Raw(TempData["Message"])</h6>
<h2 class="main-heading main-heading">User Registration</h2>
<body style="background-color:blanchedalmond">
</body> @*To Pass Model to Controller we use Begin-form*@
@using (Html.BeginForm("Registration", "UserPanel", FormMethod.Post, new { enctype = "multipart/form-data" })) //ENCTYPT is used to Encrtypt the data in html forms-- it sets the form data to the server in multiple parts
{
    @Html.AntiForgeryToken()
    <div class="form-horizontal ">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Email_id, htmlAttributes: new { @class = "control-label col-md-5" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Email_id, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Email_id, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label col-md-5" })
            <div class="col-md-10">
                @Html.EditorFor(Model => Model.Password, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.RePassword, htmlAttributes: new { @class = "control-label col-md-4" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.RePassword, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(Model => Model.RePassword, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-4" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(Model => Model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Age, htmlAttributes: new { @class = "control-label col-md-4" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Age, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(Model => Model.Age, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Gender, htmlAttributes: new { @class = "control-label col-md-4" })
            <div class="col-md-10">
                @Html.Label("Male")
                @Html.RadioButtonFor(model => model.Gender, "Male")
                @Html.Label("Female")
                @Html.RadioButtonFor(model => model.Gender, "Female")
                @Html.ValidationMessageFor(Model => Model.Gender, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Phone_no, htmlAttributes: new { @class = "control-label col-md-4" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Phone_no, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(Model => Model.Phone_no, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label col-md-4" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(Model => Model.Address, "", new { @class = "text-danger" })
            </div>
        </div>
        <h4>@Html.ViewData["Message"]</h4><hr />

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Register" class="btn btn-default button" />    @*---Register Submit Button*@
                <input type="reset" value="Clear" class="btn btn-default button" />
            </div>
        </div>
    </div>
}
<script src="~/Scripts/jquery-1.10.2.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>